#!/bin/ksh -e

# {{{ CDDL Licence header
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}
#
# Copyright 2018 OmniOS Community Edition (OmniOSce) Association.

export PATH=/usr/bin:/usr/sbin
export OMNIVER=master
export SHELL=/bin/sh

if [ "$1" = "setup" ]; then
	shift
	script=`readlink -f "$0"`
	"`dirname "$script"`/../setup" "$@"
	exit 0
fi

CFGFILE=$HOME/.omni
if [ "$1" = "-c" -a -n "$2" ]; then
	CFGFILE="$2"
	shift 2
fi

if [ ! -f "$CFGFILE" ]; then
	cat <<- EOM

omni has not yet been configured, please run:

    $0 setup [-ssh] <build directory> <github username>

Where <build directory> points to an empty directory that will be used
for building OmniOS.

	EOM
	exit 0
fi

# shellcheck disable=SC1090
. "$CFGFILE"

: "${PFEXEC:=sudo}"
: "${CTFDUMP:=/opt/onbld/bin/i386/ctfdump}"
: "${illumos_clone:="$wd/illumos-omnios"}"
: "${omnios_clone:="$wd/omnios-build"}"
: "${lxdata_clone:="$wd/lx-port-data"}"
: "${kayak_clone:="$wd/kayak"}"
: "${kayak_image:="rpool/kayak_image"}"
: "${omnios_buildtmp:="$wd/tmp"}"
: "${omnios_buildrepo:="$wd/repo"}"
: "${illumos_env:="$wd/omnios.env"}"
: "${illumos_logkeep:=7}"
if [ "$branch" != r151022 ]; then
	: "${omnios_buildarg:="parallel 3"}"
else
	: "${omnios_buildarg:="continue"}"
fi
: "${role:=1}"
: "${answer:=}"
: "${release:=unknown}"
: "${gituser:=unknown}"
if [[ "$release" = r* ]]; then
	relnum="${release:1}"
else
	relnum="`grep ONNV_BUILDNUM= "$illumos_env" | cut -d= -f2`"
	[ -z "$relnum" ] && relnum=151999
fi

export ij="$lxdata_clone/ij"

c_banner="`tput setaf 6`"
c_highlight="`tput setaf 2`"
c_error="`tput setaf 1`"
c_reset="`tput sgr0`"

show_config()
{
	cat << EOM

Current configuration ($CFGFILE):

    GitHub User:          $gituser
    Release:              $release ($relnum)
    Branch:               $branch
    Privilege Escalation: $PFEXEC

    illumos Clone:        $illumos_clone
    illumos Env File:     $illumos_env

    OmniOS Clone:         $omnios_clone
    OmniOS Build Area:    $omnios_buildtmp
    OmniOS Build Args:    $omnios_buildarg
    IPS Build Repo:       $omnios_buildrepo

    Kayak Clone:          $kayak_clone
    LX Data Clone:        $lxdata_clone

EOM
}

banner()
{
	echo
	echo "$c_banner*** $*$c_reset"
	echo
}

abort()
{
	echo
	echo "$c_error*** $*$c_reset"
	echo
	exit 1
}

is()
{
	case "$@" in
	    dev)	[ "$role" -gt 1 ] && return 0 ;;
	    guardian)	[ "$role" -gt 2 ] && return 0 ;;
	esac
	return 1
}

ask()
{
	typeset a=$answer

	echo "$c_highlight$* (y/n) $c_reset\\c"
	[ -n "$a" ] && echo "$c_error$a$c_reset"
	while [[ "$a" != [yn] ]]; do
		read -r a
		a="`echo "$a" | tr '[:upper:]' '[:lower:]'`"
	done
	[ "$a" = "y" ]
}

response()
{
	typeset a=$answer
	typeset msg="$1"
	# shellcheck disable=SC2034
	typeset opts="$2"

	echo "$c_highlight$msg $c_reset\\c" 1>&2
	[ -n "$a" ] && echo "$c_error$a$c_reset" 1>&2
	while [[ "$a" != [$opts] ]]; do
		read -r a
		a="`echo "$a" | tr '[:upper:]' '[:lower:]'`"
	done
	echo "$a"
}

shortener='http://tny.im/yourls-api.php?action=shorturl&format=simple&url='
shorten_url()
{
	wget -q -O - "$shortener$*"
}

anything_to_push()
{
	[ "$gituser" = omniosorg ] && return 1
	git for-each-ref --format="%(refname:short) %(push:track)" refs/heads \
	    | egrep -s '\[ahead '
}

repo_branch()
{
	typeset repo=${1:?repo}
	git -C "$repo" symbolic-ref --short HEAD
}

reset_illumos_branch()
{
	[ -n "`git -C "$illumos_clone" ls-files closed`" ] && \
	    git -C "$illumos_clone" checkout closed/README.ON-BINARIES.i386 \
	    || true
}

joyent_commit()
{
	git -C "$illumos_clone" show master:README.OmniOS | \
	    grep 'Last illumos-joyent' | \
	    awk '{print $4}'
}

check_repo()
{
	typeset repo="${1:?}"
	typeset branch="${2:?}"

	if [ -z "$repo" ]; then
		abort "Repository path is not set in $CFGFILE"
	fi

	banner "Checking repository $repo ($branch)"

	typeset actual_branch="`repo_branch "$repo"`"

	if [ "$actual_branch" != "$branch" ]; then
		abort "$repo is not on $branch branch ($actual_branch)"
	fi
}

update_illumos_bloody()
{
	(
		cd "$illumos_clone"
		reset_illumos_branch
		git pull upstream "$branch" --no-edit --tags

		for _branch in upstream_gate upstream_joyent; do
			banner "Updating $_branch branch"
			git checkout "$_branch"
			git pull "$_branch" master
		done

		git checkout "$branch"

		echo
		# Check to see if there are any updates to push back
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			for _branch in "$branch" upstream_gate upstream_joyent
			do
				banner "Pushing $_branch branch"
				git push origin "$_branch"
			done
			git push origin --tags
		fi
	)
}

update_illumos_stable()
{
	(
		cd "$illumos_clone"
		reset_illumos_branch
		git pull upstream "$branch" --no-edit --tags
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin "$branch"
			git push origin --tags
		fi
	)
}

update_illumos()
{
	check_repo "$illumos_clone" "$branch"
	banner "Updating illumos-omnios $release branch"
	if [ "$release" = bloody ]; then
		update_illumos_bloody
	else
		update_illumos_stable
	fi
}

ud_process()
{
	typeset arg="$1"
	typeset url="$2"

	case "$arg" in
	    -l)
		nawk -v "url=$url" '
			{
				print
				printf("         %s/%s\n\n", url, $1)
				next
			}
		'
		;;
	    *) cat ;;
	esac
}

upstream_diff()
{
	typeset arg="$1"

	[ "$release" != bloody ] \
	    && abort "Command not available for $release release"

	(
		cd "$illumos_clone"

		pp="%C(red bold)%<(67,trunc)%s %C(cyan)%h"

		echo "GATE:"
		echo

		git -c color.ui=always log \
		    --reverse --no-merges --abbrev-commit \
		    --pretty="tformat: $pp" \
		    master..upstream_gate \
		    | ud_process "$arg" https://www.illumos.org/issues

		hash="`joyent_commit`"
		head="`git rev-parse upstream_joyent`"
		echo
		echo "JOYENT ($hash..):"
		echo
		git -c color.ui=always log \
		    --reverse --no-merges --abbrev-commit \
		    --grep='^OS-' \
		    --pretty="tformat: $pp" \
		    "$hash..$head" \
		    | ud_process "$arg" https://smartos.org/bugview

		echo "$c_reset"
	)
}

update_omnios()
{
        check_repo "$omnios_clone" "$branch"
	banner "Updating $release OmniOS build"
        (
		cd "$omnios_clone"
		git pull upstream "$branch" --no-edit --tags
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin "$branch"
			git push origin --tags
		fi
	)
}

update_kayak()
{
	check_repo "$kayak_clone" "$branch"
	banner "Updating $release kayak"
	(
		cd "$kayak_clone"
		git pull upstream "$branch" --no-edit
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin "$branch"
		fi
	)
}

terminate_illumos()
{
	banner "Stopping illumos build, please wait..."
	kill "$nightlypid" 2>/dev/null
	pkill -9 -P "$tailpid"
	sleep 1
	kill -9 "$tailpid" 2>/dev/null
}

build_illumos()
{
	typeset env="${1:-${illumos_env}}"

	lockf="$illumos_clone/log/nightly.lock"
	if [ -h "$lockf" ]; then
		readlink "$lockf" | IFS=. read -r host user pid
		kill -0 "$pid" 2>/dev/null \
		    && abort "Illumos build already in progress ($host/$user)."
		banner "Stale build lockfile detected, ignoring."
	fi

	typeset benv="`basename "$env"`"
	banner "Starting illumos-omnios $release build... ($benv)"

	# Remove any stale log file
	export logf="$illumos_clone/log/nightly.log"
	[ -f "$logf" ] && rm -f "$logf"

	ctrun -l child -o noorphan /opt/onbld/bin/nightly "$env" &
	nightlypid=$!

	(
		while [ ! -f "$logf" ]; do
			sleep 1
		done
		tail -f "$logf" | egrep '^(====|real |user |sys )'
	) &
	tailpid=$!

	trap terminate_illumos INT
	wait $nightlypid
	trap - INT
	terminate_illumos
	sleep 10
}

build_omnios()
{
	typeset arg="${*:-${omnios_buildarg}}"
	[ "$arg" = "-e" ] && arg="-e ${omnios_buildarg}"
	(
		cd "$omnios_clone/build"
		[ -z "$USER" -a -n "$LOGNAME" ] && USER="$LOGNAME"
		# shellcheck disable=SC2086
		ctrun -l child -o noorphan ./buildctl build $arg
	)
}

build_world()
{
	build_illumos &
	build_omnios "$@"
}

build_media()
{
	[ "`zonename`" = "global" ] || \
	    abort "Install media can only be built in the global zone."

	export PKGURL="${1:-file://$omnios_buildrepo}"

	banner "Building media from $PKGURL..."

	(
		cd "$kayak_clone"
		if [ "$relnum" -ge 151025 ]; then
			$PFEXEC gmake zfsdestroy install-usb clean \
			    PKGURL="$PKGURL" \
			    PREBUILT_ILLUMOS="$illumos_clone"
		else
			zfs list $kayak_image >/dev/null 2>&1 && \
			    $PFEXEC zfs destroy -R $kayak_image
			$PFEXEC gmake install-usb clean \
			    PKGURL="$PKGURL" \
			    PREBUILT_ILLUMOS="$illumos_clone"
		fi
	)
}

onu_destroy()
{
	ask "Destroy all unused ONU boot environments?" || exit 0
	beadm list -H | awk -F\; '
	    $1 ~ /-onu$/ && $3 !~ /N/ { print $1}
	' | while read -r be; do
		echo "Destroying $be"
		$PFEXEC beadm destroy -F "$be"
	done
}

onu_illumos()
{
	pkgdir="$illumos_clone/packages/i386/nightly-nd"
	while [[ "$1" = -* ]]; do
		case $1 in
		    -d)
			pkgdir="$illumos_clone/packages/i386/nightly"
			;;
		    -nd|"")
			pkgdir="$illumos_clone/packages/i386/nightly-nd"
			;;
		    *)
			abort "Unknown argument ($1) to onu."
			;;
		esac
		shift
	done

	[ -z "$1" ] && be="`date +%Y%m%d01`" || be="$1"

	[ -d "$pkgdir" ] || abort "No built illumos packages found."

	while beadm list -H | egrep -s "^${be}-onu;"; do
		((be = be + 1))
	done
	banner "ONU to new BE $be-onu"
	$PFEXEC /opt/onbld/bin/onu -t "$be-onu" -d "$pkgdir"
}

build_cscope()
{
	/opt/onbld/bin/bldenv "$illumos_env" \
	    "cd $illumos_clone/usr/src && dmake setup" > /dev/null
	/opt/onbld/bin/bldenv "$illumos_env" \
	    "cd $illumos_clone/usr/src && dmake cscope.out"
}

mail_msg()
{
	[ ! -d "$illumos_clone/log" ] && abort "No log directory present."
	(
		cd "$illumos_clone/log"
		# shellcheck disable=SC2012
		dir="`ls -1tr | fgrep 'log.' | tail -1`"
		[ -f "$dir/mail_msg" ] || abort "Mail message not present."
		echo "$illumos_clone/log/$dir/mail_msg"
	)
}

view_mail_msg()
{
	less -X "`mail_msg`"
}

reset_buildrepo()
{
	echo "Clearing build IPS repository..."
	[ -d "$omnios_buildrepo" ] && rm -rf "$omnios_buildrepo"
	pkgrepo create "$omnios_buildrepo"
	pkgrepo add-publisher -s "$omnios_buildrepo" omnios
	pkgrepo -s "$omnios_buildrepo" info
}

cleanup_omnios()
{
	echo "Clearing temporary build directory..."
	[ -d "$omnios_buildtmp" ] && rm -rf "$omnios_buildtmp"
	[ -d "$omnios_clone/tmp.repo" ] && rm -rf "$omnios_clone/tmp.repo"
	reset_buildrepo
	echo "Removing build logs..."
	find "$omnios_clone" -type f -name build.log\* -exec rm -f {} +
}

cleanup_illumos()
{
	echo "Cleaning illumos-omnios..."
	/opt/onbld/bin/bldenv "$illumos_env" \
	    "cd $illumos_clone/usr/src && dmake clobber" > /dev/null
	#git -C "$illumos_clone" clean -fd
	echo "Removing illumos proto area..."
	[ -d "$illumos_clone/proto" ] && rm -rf "$illumos_clone/proto"
	echo "Removing illumos packages area..."
	[ -d "$illumos_clone/packages" ] && rm -rf "$illumos_clone/packages"
	echo "Removing old logs..."
	if [ -d "$illumos_clone/log" ]; then
		find "$illumos_clone/log" -type f -ctime "+$illumos_logkeep" \
		    -exec rm -f {} +
		find  "$illumos_clone/log" -type d -name 'log.20*' \
		    -exec rmdir {} + 2>/dev/null
	fi
}

cleanup()
{
	typeset target="${1:-all}"

	case "$target" in
	    omnios)	cleanup_omnios ;;
	    illumos)	cleanup_illumos ;;
	    all)	cleanup_omnios; cleanup_illumos ;;
	    *)		echo "Unknown target $target" ;;
	esac
}

merge_gate()
{
	ask "Merge changes from upstream illumos-gate?" || exit 0
	check_repo "$illumos_clone" "$branch"
	(
		_branch="upstream_merge/`date +%Y%m%d`01"
		cd "$illumos_clone"
		git checkout -b "$_branch" || exit 1
		check_repo "$illumos_clone" "$_branch"
		git merge upstream_gate
	) || exit 1
}

abort_gate()
{
	_branch="`repo_branch "$illumos_clone"`"
	[[ $_branch = upstream_merge/* ]] || \
	    abort "On wrong branch, $_branch (is merge in progress?)"

	ask "Stop upstream merge and reset state?" || exit 0

	git -C "$illumos_clone" reset HEAD --hard
	git -C "$illumos_clone" checkout master
	git -C "$illumos_clone" branch -D "$_branch"

	banner "Upstream merge aborted and $_branch branch deleted."
}

# Should use `jq` - add to omnios-extra?
json_get_key()
{
	typeset file="$1"
	typeset key="$2"

	grep "\"$key\":" "$file" | cut -d'"' -f4 | head -1
}

github_request()
{
	typeset auth="$1"
	typeset api="$2"
	typeset data="$3"
	typeset method="${4:-POST}"
	typeset op="`mktemp`"

	curl -s -X "$method" \
	    -o "$op" \
	    -u "$auth" \
	    -H "Accept: application/vnd.github.v3+json" \
	    -H "Content-Type: application/json" \
	    --data-binary "@$data" \
	    "https://api.github.com/$api"

	echo "$op"
}

create_pull_request()
{
	typeset token="$1"
	typeset duser="$2"
	typeset drepo="$3"
	typeset dbranch="$4"
	typeset suser="$5"
	typeset sbranch="$6"
	typeset title="$7"
	typeset bodyfile="$8"
	typeset patch="$9"

	perl -i -p -e '
		s/\n/\\n/g;
		s/(["])/\\\1/g;
	' "$bodyfile"

	typeset data="`mktemp`"

	cat <<- EOM > "$data"
		{
			"title":	"$title",
			"head":		"$suser:$sbranch",
			"base":		"$dbranch",
			"body":		"`cat "$bodyfile"`"
		}
	EOM

	op=`github_request "$suser:$token" \
	    "repos/$duser/$drepo/pulls" "$data"`

	rm -f "$data"

	typeset prurl="`json_get_key "$op" html_url`"

	if [ -z "$prurl" ]; then
		cat "$op"
		rm -f "$op"
		abort "Problem creating PR"
	fi

	rm -f "$op"

	echo "PR URL: $prurl"
	number="`basename "$prurl"`"
	echo "PR $number created, assigning label."

	# Assign additional attributes via the issues API
	if [ -n "$patch" -a -f "$patch" ]; then
		op=`github_request "$suser:$token" \
		    "repos/$duser/$drepo/issues/$number" "$patch" PATCH`
		rm -f "$op"
	fi

	echo "Finished, the PR can be found at:"
	echo
	echo "    $prurl"
}

illumos_pull_request()
{
	_branch="`repo_branch "$illumos_clone"`"
	typeset force
	[ "$1" = "-f" ] && force=1 || force=0

	# This is just a sanity check to look for a branch name ending in
	# yyyymmddnn
	if echo "$_branch" | /usr/xpg4/bin/egrep -s '/201[0-9]{7}$'; then
		:
	else
		[ $force -eq 1 ] || abort "$_branch is not an upstream merge."
	fi

	ask "Push local branch $_branch ready for pull-request?" || exit 0

	reset_illumos_branch
	git -C "$illumos_clone" push -u origin "$_branch"
	git -C "$illumos_clone" checkout "$branch"

	prbase="https://github.com/omniosorg/illumos-omnios/compare"
	prbranch="$branch...$gituser:$_branch?expand=1"

	echo
	token="`git config user.token`"
	if [ -z "$token" ] || ! ask "Create PR automatically on GitHub?"; then
		cat <<- EOM
			Local branch $_branch has been pushed to github.
			Visit the following URL to create a pull-request:

			    `shorten_url "$prbase/$prbranch"`

		EOM
		return
	fi

	# Automate creation of the pull-request (experimental)
	# Requires that your 2FA token is stored in your git config
	# as user.token.
	#     git config [--global] --add user.token <token>

	if [[ "`uname -v`" = omnios-${_branch/\//-}-* ]]; then
		uname="`uname -a`"
	else
		uname="_TBC_"
	fi

	prdata=`mktemp`
	cat << EOM > "$prdata"
Weekly upstream for $_branch

## Backports

_TBC_

## onu

\`\`\`
$uname
\`\`\`

## mail_msg

\`\`\`
`cat "\`mail_msg\`"`
\`\`\`
EOM

	patch=`mktemp`
	cat <<- EOM > "$patch"
		{
			"labels": [
				"upstream-merge",
				"on-hold"
			]
		}
	EOM

	# token duser drepo dbranch suser sbranch title bodyfile patch
	create_pull_request "$token" \
		omniosorg illumos-omnios "$branch" \
		"$gituser" "$_branch" \
		"Upstream merge $_branch" \
		"$prdata" "$patch"

	rm -f "$prdata" "$patch"
}

omnios_pull_request()
{
	_branch="`repo_branch "$omnios_clone"`"

	[ "$_branch" = "$branch" ] && abort "Not on suitable branch."

	ask "Push local branch $_branch ready for pull-request?" || exit 0

	( cd "$omnios_clone" && ./tools/test ) || abort "Test failure"

	if [ -n "`git -C "$omnios_clone" diff --name-only`" ]; then
		banner "Uncommitted files found"
		git -C "$omnios_clone" status --short --branch -unormal
		echo
		ask "Proceed?" || abort "PR aborted."
	fi

	git -C "$omnios_clone" push -u origin "$_branch"
	commit_msg="`git -C "$omnios_clone" log -n1 --format=%s`"
	git -C "$omnios_clone" checkout "$branch"

	prbase="https://github.com/omniosorg/omnios-build/compare"
	prbranch="$branch...$gituser:$_branch?expand=1"

	echo
	token="`git config user.token`"
	if [ -z "$token" ] || ! ask "Create PR automatically on GitHub?"; then
		cat <<- EOM
			Local branch $_branch has been pushed to github.
			Visit the following URL to create a pull-request:

			    `shorten_url "$prbase/$prbranch"`

		EOM
		return
	fi

	# Automate creation of the pull-request (experimental)
	# Requires that your 2FA token is stored in your git config
	# as user.token.
	#     git config [--global] --add user.token <token>

	prdata="`mktemp`"
	[ "$branch" = "master" ] || commit_msg="$commit_msg ($branch)"
	echo "$commit_msg" > "$prdata"

	r=
	while [ "$r" != 'y' ]; do
		banner "`cat "$prdata"`"
		r="`response 'Proceed? (y[es]/e[dit]/a[bort])' 'yea'`"
		case "$r" in
			e) "${EDITOR:-vi}" "$prdata" ;;
			a) abort "PR aborted." ;;
		esac
	done

	patch=`mktemp`
	cat <<- EOM > "$patch"
		{
			"labels": [
				"package update"
	EOM
	if [ "$branch" = "master" ]; then
		ask "Backport to-do?" && echo ',"backport-todo"' >> "$patch"
	else
		ask "Backport?" && echo ',"backport-PR"' >> "$patch"
	fi
	cat <<-EOM >> "$patch"
			]
		}
	EOM

	# token duser drepo dbranch suser sbranch title bodyfile patch
	create_pull_request "$token" \
		omniosorg omnios-build "$branch" \
		"$gituser" "$_branch" \
		"$commit_msg" \
		"$prdata" "$patch"

	rm -f "$prdata" "$patch"
}

lx_begin()
{
	check_repo "$lxdata_clone" "$branch"
	(
		cd "$lxdata_clone"
		git pull

		[ -f "${ij}-ALL-commits" ] && \
		    abort "An LX merge session is in progress, aborting."

		check_repo "$illumos_clone" "$branch"
		cd "$illumos_clone"
		reset_illumos_branch
		# Ensure that the local branch is fully up-to-date
		git pull upstream "$branch" --no-edit --tags || exit 1
		git checkout upstream_joyent || exit 1

		echo "--- Building list of new commits"

		git log --reverse --no-merges --format=%H "`joyent_commit`.." \
		    > "${ij}-ALL-commits"

		echo "    Found  `wc -l < "${ij}-ALL-commits"` commit(s)"

		echo "--- Filtering out gate commits"

		git log master --format=%H > "${ij}-GATE-commits"
		fgrep -v -f "${ij}-GATE-commits" "${ij}-ALL-commits" \
		    > "${ij}-TODO-commits"

		num="`wc -l < "${ij}-TODO-commits"`"

		if [ "$num" -eq 0 ]; then
			echo "-- No commits to evaluate."
			rm -f "$ij"-*
			git checkout "$branch"
		else
			echo "    Leaves $num commit(s)"
			_branch="joyent_merge/`date +%Y%m%d`01"
			git checkout -b "$_branch" master || exit 1
			check_repo "$illumos_clone" "$_branch"
		fi
	) || exit 1
	lx_stat
}

lx_stat()
{
	[ -f "${ij}-ALL-commits" ] || abort "No LX merge session in progress"

	typeset tc="`wc -l < "${ij}-TODO-commits"`"
	typeset pc="`wc -l < /dev/null`"
	typeset sc="`wc -l < /dev/null`"
	[ -f "${ij}-picked-commits" ] && pc="`wc -l < "${ij}-picked-commits"`"
	[ -f "${ij}-skipped-commits" ] && sc="`wc -l < "${ij}-skipped-commits"`"

	cat <<- EOM
		$c_banner
		$tc lx commit(s) remaining
		$pc lx commit(s) picked
		$sc lx commit(s) skipped $c_reset
	EOM

	if [ "$tc" -lt 1 ]; then
		banner "--- No commits remaining. Run 'lx_end' to finish."
		exit 1
	fi
}

lx_pick()
{
	typeset cpargs="$*"
	_branch="`repo_branch "$illumos_clone"`"
	[[ "$_branch" = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (have you run lx_begin?)"

	[ -f "${ij}-TODO-commits" ] || abort "No LX merge session in progress"

	(
		cd "$illumos_clone"

		while :; do
			lx_stat

			hash="`head -1 "${ij}-TODO-commits"`"
			os="`git log -n1 --format=%s "$hash" \
			    | awk '{print $1}'`"

			cherry=
			while :; do
				git show --stat "$hash"

				echo
				echo "        https://smartos.org/bugview/$os"
				echo

				r="`response 'Cherry pick this commit? (y[es]/n[o]/s[how]/a[bort])' 'ynsa'`"
				case $r in
				    a)
					abort "Exiting at user request."
					;;
				    s)
					echo "Showing commit..."
					git show "$hash"
					;;
				    y)
					echo "$hash" >> "${ij}-picked-commits"
					cherry=1
					break
					;;
				    n)
					echo "$hash" >> "${ij}-skipped-commits"
					cherry=0
					break
					;;
				esac
			done
			echo "$hash" >> "${ij}-decided-commits"
			sed -i "/$hash/d" "${ij}-TODO-commits"
			if [ "$cherry" -eq 1 ]; then
				# shellcheck disable=SC2086
				git cherry-pick $cpargs "$hash" \
				    || abort "Problem during cherry-pick."
			fi
		done
	) || exit 1
}

lx_back()
{
	_branch="`repo_branch "$illumos_clone"`"
	[[ "$_branch" = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (have you run lx_begin?)"

	[ -f "${ij}-TODO-commits" ] || abort "No LX merge session in progress"

	hash="`git -C "$illumos_clone" log -n1 --pretty=format:%H`"
	jhash="`tail -1 "${ij}-picked-commits"`"

	[ -n "$jhash" ] || abort "Cannot fetch last commit hash"

	log="`git -C "$illumos_clone" log -n1 --pretty=format:%s "$hash"`"
	jlog="`git -C "$illumos_clone" log -n1 --pretty=format:%s "$jhash"`"

	if [ "$log" != "$jlog" ]; then
		echo
		echo "Log message mismatch:"
		echo "    Local:  $log"
		echo "    Joyent: $jlog"
		ask "Proceed anyway?" || exit 1
	fi

	echo
	git -C "$illumos_clone" show --stat "$hash"
	ask "Back-out this commit?" || exit 0

	git -C "$illumos_clone" reset --merge "$hash^" \
	    || abort "git reset failed."

	sed -i "/$jhash/d" "${ij}-picked-commits"
	sed -i "/$jhash/d" "${ij}-decided-commits"
	sed -i "1i\\
$jhash
	" "${ij}-TODO-commits"

	echo
	echo "Commit backed out successfully."
	lx_stat
}

lx_end()
{
	_branch="`repo_branch "$illumos_clone"`"
	[[ $_branch = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (have you run lx_begin?)"
	[ -f "${ij}-TODO-commits" ] || abort "No LX merge session in progress"
	[ -s "${ij}-TODO-commits" ] && \
	    abort "Not all commits have been evaluated,"\
	    "run 'lx_pick' until none remain."

	lasthash="`tail -1 "$lxdata_clone/ij-decided-commits"`"

	(
		banner "Archiving port data"

		cd "$lxdata_clone"
		arc="`date +%Y/%b%d`"
		[ -d "$arc" ] && abort "Archive directory $arc alread exists."
		mkdir -p "$arc"
		rm -f ij-TODO-commits	# Now empty
		rm -f ij-GATE-commits
		mv ij-* "$arc"
		aij="$lxdata_clone/$arc/ij"

		git add "$arc"
		git commit -m "LX Port data for $_branch" "$arc"

		is guardian \
		    && ask "Push lx-port-data back to github/omniosorg?" \
		    && git push

		cd "$illumos_clone"

		banner "Updating README.OmniOS ($lasthash)"

		sed -i "/^Last illumos-joyent/s/: .*/: $lasthash/" \
		    README.OmniOS
		git commit -m 'Update README.OmniOS with last Joyent commit' \
		    README.OmniOS

		banner "The following commits have been picked."
		git log --reverse --format=oneline "master..$_branch" \
		    | sed 's/Reviewed.*//' | cut -d\  -f2-

		banner "The following commits have been skipped."
		cat "${aij}-skipped-commits" | while read -r f; do
			git show --stat --format=oneline "$f" | head -1 \
			    | sed 's/Reviewed.*//' | cut -d\  -f2-
		done

		echo
	)
}

lx_abort()
{
	[ -f "${ij}-ALL-commits" ] || abort "No LX merge session in progress"

	_branch="`repo_branch "$illumos_clone"`"
	[[ $_branch = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (is merge in progress?)"

	ask "Stop lx merge and reset state?" || exit 0

	git -C "$illumos_clone" reset HEAD --hard
	git -C "$illumos_clone" checkout master
	git -C "$illumos_clone" branch -D "$_branch"
	rm -f "$ij"*

	banner "LX merge aborted and $_branch branch deleted."
}

ctfextract()
{
	$CTFDUMP -t "$@" 2>/dev/null | sed -n '
		/^  </ {
			s/ refers to.*//
			p
		}
	'
}

ctfcompare()
{
	typeset proto="$1"
	typeset object="$2"

	[ -f "$proto/$object" ] || abort "$proto/$object not present"

	[ -d /tmp/ctf ] || mkdir /tmp/ctf

	old=`mktemp -p /tmp/ctf`; ctfextract "/$object" > "$old"
	new=`mktemp -p /tmp/ctf`; ctfextract "$proto/$object" > "$new"

	if gdiff -qw "$old" "$new" >/dev/null; then
		rm -f "$old" "$new"
	else
		echo "Differences in $object - vimdiff $old $new"
	fi
}

ctfcheck()
{
	proto="$illumos_clone/proto/root_i386-nd"
	[ -d "$proto" ] || abort "No proto root found @ $proto"

	echo "Checking kernel/amd64/genunix"
	ctfcompare "$proto" kernel/amd64/genunix

	echo "Checking platform/i86pc/kernel/amd64/unix"
	ctfcompare "$proto" platform/i86pc/kernel/amd64/unix

	echo "Checking drivers in root"
	find "$proto/kernel/drv/amd64" -type f -perm -+x | while read -r f; do
		bf="`basename "$f"`"
		[ -f "/kernel/drv/amd64/$bf" ] || continue
		ctfcompare "$proto" "kernel/drv/amd64/$bf"
	done

	echo "Checking drivers in usr"
	find "$proto/usr/kernel/drv/amd64" -type f -perm -+x | while read -r f
	do
		bf="`basename "$f"`"
		[ -f "/usr/kernel/drv/amd64/$bf" ] || continue
		ctfcompare "$proto" "usr/kernel/drv/amd64/$bf"
	done
}

fnfind_obj()
{
	typeset object="$1"
	typeset token="$2"

	typeset sobject="`echo "$object" | sed 's^.*/root_i386[^/]*^^g'`"

	if [ -d "$object" ]; then
		find "$object" -type f -perm -+x | while read -r f; do
			fnfind_obj "$f" "$token"
		done
	elif [ -f "$object" ]; then
		if nm "$object" | egrep -s "$token"; then
			echo "---> $sobject"
			pkg search -lHo pkg.name "path:$sobject" \
			    | sed 's/^/     /'
		fi
	else
		abort "Missing object $object"
	fi
}

fnfind()
{
	typeset token="$1"

	[ -n "$token" ] || abort "Syntax: omni fnfind <function>"

	proto="$illumos_clone/proto/root_i386-nd"
	[ -d "$proto" ] || abort "No proto root found @ $proto"

	for o in \
		kernel/amd64/genunix \
		platform/i86pc/kernel/amd64/unix \
		kernel/drv/amd64 \
		kernel/misc/amd64 \
		usr/kernel/drv/amd64 \
	; do
		fnfind_obj "$proto/$o" "$token"
	done
}

patch_motd()
{
	PKGURL="${1:-file://$omnios_buildrepo}"

	banner "Pulling SUNWcs from $PKGURL..."

	tmpdir="`mktemp -d`"
	pkgrecv -s "$PKGURL" -d "$tmpdir" --raw -m latest SUNWcs
	cd "$tmpdir/SUNWcs/"* || exit 1
	hash="`grep motd manifest | grep '=false$' | awk '{print $2}'`"
	[ -f "$hash" ] || abort "No file called $hash"
	cp "$hash" motd
	vi motd

	echo
	cat motd
	ask "Push updated motd?" || exit 0
	echo

	nhash="`digest -a sha1 motd`"
	echo "New motd hash $nhash"
	mv motd "$nhash"
	sed -i "/file $hash /s/ $hash chash=[^ ]* / $nhash /" manifest
	echo "Publishing..."
	pkgsend publish -s "$omnios_buildrepo" -d . manifest

	echo "Updated SUNWcs is now in your local repo ready to stage."
}

igrep()
{
	git -C "$illumos_clone" log --grep "$@"
}

ogrep()
{
	git -C "$omnios_clone" log --grep "$@"
}

push_upstreams()
{
	check_repo "$illumos_clone" "$branch"
	ask "Push upstream branches to github/omniosorg?" || exit 0
	(
		cd "$illumos_clone"

		for _branch in upstream_gate upstream_joyent; do
			banner "Pushing $_branch branch to github/omniosorg"
			git push upstream "$_branch"
		done
	)
}

version()
{
	echo $OMNIVER
}

help()
{
	cat << EOM
omni [-n|-y] <operation>

    -c <file>           - Use alternative configuration file
    -y/-n               - assume yes/no to all questions

Operations (defaults for optional arguments are shown in []):

    show_config         - display the current configuration                (cfg)

    update_illumos      - update your local omnios illumos environment     (ui)
    build_illumos [env] - build omnios-illumos [omnios.env]                (bi)
    mail_msg            - view mail_msg file from last build               (mm)

    update_omnios       - update your local omnios build environment       (uo)
    build_omnios [args] - build OmniOS `printf "%-36s" "[$omnios_buildarg]"`(bo)

    update_world        - update local illumos and omnios                  (uw)
    build_world [args]  - build illumos-omnios and OmniOS in parallel      (bw)
			  The default env file is used for illumos, any
                          provided arguments are passed to 'build_omnios'

    update_kayak        - update your local kayak clone                    (uk)
    build_media [URL]   - build OmniOS install media (GZ only)             (bm)
                          Defaults to using local repo if URL not provided

    onu [-d|-nd] [name] - Create a new boot environment from the locally
                          built copy of omnios-illumos. Non-debug packages
                          by default or as per provided option
    destroy_onu         - Remove all ONU boot environments                 (do)

    cleanup [target]    - reset build environment to clean state. Target
                          is optional and can be 'omnios' or 'illumos'
    reset_repo          - clear and re-initialise the build repo           (rr)
EOM

	is dev && cat << EOM

    upstream_diff       - show changes between omnios-illumos master and   (ud)
                          upstream (bloody only)
    merge_gate          - merge changes from upstream illumos-gate to new  (mg)
                          branch
    abort_gate          - stop the in-progress gate merge and reset        (ag)
    pull_request        - push local branch and prepare for pull request   (pr)
    omnios_pull_request - push local branch and prepare for pull request   (opr)
    lx_begin            - begin the upstream lx zone merge process         (lb)
    lx_pick [opts]      - evaluate the next lx commit                      (lp)
    lx_back             - revert last last picked commit                   (lk)
    lx_end              - finish the lx zone merge process                 (le)
    lx_abort            - stop the lx merge process and reset everything   (la)
    lx_stat             - show current lx merge status                     (ls)

    ctfcheck            - compare CTF type data between running system     (ctf)
                          and last built bits
    cscope              - build cscope database
EOM

	is guardian && cat << EOM

    push_upstreams      - Push upstream branches to github/omniosorg       (pu)
    motd [URL]          - Manually change /etc/motd in SUNWcs

EOM

	cat << EOM
    fnfind <pattern>    - Find the object that contains matching functions (fnf)
    igrep <pattern>     - Grep the illumos-omnios git log                  (ig)
    ogrep <pattern>     - Grep the omnios-build git log                    (og)
    version             - Display program version ($OMNIVER)

NB: Ops can be abbreviated to the term shown in brackets, e.g. 'omni uo'
	
EOM
}

[ "$1" = "-y" ] && answer=y && shift
[ "$1" = "-n" ] && answer=n && shift

[ -z "$*" ] && help && exit 0

op="$1"; shift
case $op in
	cfg|sc|show_config)		show_config ;;
	ui|update_illumos)		update_illumos ;;
	bi|build_illumos)		build_illumos "$@" ;;
	uo|update_omnios)		update_omnios ;;
	bo|build_omnios)		build_omnios "$@" ;;
	uw|update_world)		update_illumos && update_omnios ;;
	bw|build_world)			build_world "$@" ;;
	uk|update_kayak)		update_kayak ;;
	bm|build_media)			build_media "$@" ;;
	mail_msg|mm)			view_mail_msg ;;
	onu)				onu_illumos "$@" ;;
	"do"|destroy_onu)		onu_destroy ;;
	cleanup)			cleanup "$@" ;;
	rr|reset_repo|repo_reset)	reset_buildrepo ;;
	ud|upstream_diff)		is dev && upstream_diff "$@" || help ;;
	mg|merge_gate)			is dev && merge_gate || help ;;
	ag|abort_gate)			is dev && abort_gate || help ;;
	pr|pull_request)		is dev && illumos_pull_request "$@" \
					    || help ;;
	opr|omnios_pull_request)	is dev && omnios_pull_request "$@" \
					    || help ;;
	lb|lx_begin)			is dev && lx_begin || help ;;
	lp|lx_pick)			is dev && lx_pick "$@" || help ;;
	lk|lx_back)			is dev && lx_back || help ;;
	le|lx_end)			is dev && lx_end || help ;;
	la|lx_abort)			is dev && lx_abort || help ;;
	ls|lx_stat)			is dev && lx_stat || help ;;
	pu|push_upstreams)		is guardian && push_upstreams || help ;;
	motd)				is guardian && patch_motd "$@" \
					    || help ;;
	cscope)				is dev && build_cscope ;;
	ctf|ctfcheck)			is dev && ctfcheck ;;
	fnf|fnfind)			fnfind "$@" ;;
	ig|igrep)			igrep "$@" ;;
	og|ogrep)			ogrep "$@" ;;
	ver|version)			version ;;
	*)				help ;;
esac

exit 0

# Vim hints
# vim:fdm=marker
