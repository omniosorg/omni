#!/bin/ksh -e

# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2017 OmniOS Community Edition (OmniOSce) Association.

if [ "$1" = "setup" ]; then
	shift
	script=`readlink $0`
	`dirname $script`/../setup "$@"
	exit 0
fi

CFGFILE=$HOME/.omni

if [ ! -f "$CFGFILE" ]; then
	cat <<- EOM

omni has not yet been configured, please run:

    $0 setup [-ssh] <build directory> <github username>

Where <build directory> points to an empty directory that will be used
for building OmniOS.

	EOM
	exit 0
fi

. $CFGFILE

: ${PFEXEC:=sudo}
: ${illumos_clone:="$wd/illumos-omnios"}
: ${omnios_clone:="$wd/omnios-build"}
: ${lxdata_clone:="$wd/lx-port-data"}
: ${omnios_buildtmp:="$wd/tmp"}
: ${omnios_buildrepo:="$wd/repo"}
: ${illumos_env:="$wd/omnios.env"}
: ${role:=1}
: ${answer:=}

banner()
{
	echo
	echo "*** $*"
	echo
}

abort()
{
	banner "$@"
	exit 1
}

is()
{
	case $* in
	    dev)	[ "$role" -gt 1 ] && return 0 ;;
	    guardian)	[ "$role" -gt 2 ] && return 0 ;;
	esac
	return 1
}

ask()
{
	typeset a=$answer

	echo "$* (y/n) \\c"
	[ -n "$a" ] && echo $a
	while [[ "$a" != [yYnN] ]]; do
		read a
	done
	[[ "$a" = [yY] ]]
}

anything_to_push()
{
	git for-each-ref --format="%(refname:short) %(push:track)" refs/heads \
	    | egrep -s '\[ahead '
}


repo_branch()
{
	typeset repo=${1:?repo}
	git -C "$repo" symbolic-ref --short HEAD
}

reset_illumos_branch()
{
	git checkout closed/README.ON-BINARIES.i386
}

joyent_commit()
{
	git -C "$illumos_clone" show master:README.OmniOS | \
	    grep 'Last illumos-joyent' | \
	    awk '{print $4}'
}

check_repo()
{
	typeset repo="${1:?}"
	typeset branch="${2:?}"

	if [ -z "$repo" ]; then
		echo "Repository path is not set in $CFGFILE"
		exit 1
	fi

	banner "Checking repository $repo ($branch)"

	typeset actual_branch="`repo_branch "$repo"`"

	if [ "$actual_branch" != "$branch" ]; then
		echo "$repo is not on $branch branch ($actual_branch)"
		exit 1
	fi
}

update_illumos_bloody()
{
	(
		cd $illumos_clone
		reset_illumos_branch
		git pull upstream $branch --no-edit --tags

		for _branch in upstream_gate upstream_joyent; do
			banner "Updating $_branch branch"
			git checkout $_branch
			git pull $_branch master
		done

		git checkout $branch

		echo
		# Check to see if there are any updates to push back
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			for _branch in $branch upstream_gate upstream_joyent
			do
				banner "Pushing $_branch branch"
				git push origin $_branch
			done
			git push origin --tags
		fi
	)
}

update_illumos_stable()
{
	(
		cd $illumos_clone
		reset_illumos_branch
		git pull upstream $branch --no-edit --tags
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin $branch
			git push origin --tags
		fi
	)
}

update_illumos()
{
	check_repo "$illumos_clone" $branch
	banner "Updating illumos-omnios $release branch"
	if [ "$release" = bloody ]; then
		update_illumos_bloody
	else
		update_illumos_stable
	fi
}

diff_colour()
{
	gegrep --colour '^|^ [^ ].*'
}

upstream_diff()
{
	if [ "$release" != bloody ]; then
		echo "Command not available for $release release"
		return
	fi
	check_repo "$illumos_clone" $branch
	(
		cd $illumos_clone

		echo "GATE:"
		echo
		git log --reverse --no-merges --abbrev-commit \
		    master..upstream_gate \
		    | nawk '
			function op() {
				if (commit)
					printf("%-69s %s\n", issue, commit)
				commit = 0
			}
			/^commit / 	{ op(); commit = $2 }
			/^    [0-9][0-9][0-9][0-9] / {
				gsub(/  +/, " ")
				issue = substr($0, 0, 69)
			}
			END { op() }
		    ' | diff_colour

		hash=`joyent_commit`
		echo
		echo "JOYENT ($hash..):"
		echo

		reset_illumos_branch
		git checkout -q upstream_joyent
		git whatchanged --reverse --no-merges --abbrev-commit $hash.. \
		    | nawk '
			function op() {
				if (matched)
				{
					printf("%-69s %s\n", issue, commit)
					for (i in files)
						print "         ", files[i]
					print ""
					matched = 0
				}
				# Clear array
				split("", files)
			}
			/^commit / 	{ op(); commit = $2 }
			/OS-[0-9]/ {
				gsub(/  +/, " ")
				issue = substr($0, 0, 69)
			}
			/^:/ {
				files[NR] = sprintf("%s %s", $5, $6)
			}
			/ lx / { matched = 1 }
			/(brand|fs)\/lx/ { matched = 1 }
			/\/lx_/		 { matched = 1 }
			END { op() }
		    ' | diff_colour
		git checkout -q $branch
		echo
	)
}

update_omnios()
{
        check_repo "$omnios_clone" $branch
	banner "Updating $release OmniOS build"
        (
		cd $omnios_clone
		git pull upstream $branch --no-edit --tags
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin $branch
			git push origin --tags
		fi
	)
}

build_illumos()
{
	banner "Starting illumos-omnios $release build..."
	/opt/onbld/bin/nightly $illumos_env &
	nightlypid=$!
	while [ ! -f $illumos_clone/log/nightly.log ]; do
		sleep 1
	done
	(
		tail -f $illumos_clone/log/nightly.log \
		    | egrep '^(====|real|user|sys)'
	) &
	tailpid=$!
	wait $nightlypid
	kill $tailpid
	#cat $illumos_clone/log/mail_msg
}

build_omnios()
{
	cd $omnios_clone/build
	[ -z "$USER" ] && USER=LOGNAME
	./buildctl build continue
}

onu_illumos()
{
	[ -d $illumos_clone/packages/i386/nightly-nd ] \
	    || abort "No built illumos packages found."

	be=`date +%Y%m%d01`
	while beadm list -H | egrep -s "^${be}-onu;"; do
		((be = be + 1))
	done
	banner "ONU to new BE $be-onu"
	$PFEXEC /opt/onbld/bin/onu -t $be-onu \
	    -d $illumos_clone/packages/i386/nightly-nd
}

cleanup()
{
	echo "Clearing temporary build directory..."
	[ -d "$omnios_buildtmp" ] && rm -rf "$omnios_buildtmp"
	echo "Clearing build repository..."
	if [ -d "$omnios_buildrepo" ]; then
		rm -rf $omnios_buildrepo
		pkgrepo create $omnios_buildrepo
		pkgrepo add-publisher -s $omnios_buildrepo omnios
	fi
	echo "Removing built package cache..."
	[ -f "$omnios_clone/build/built.cache" ] && \
	    rm -f "$omnios_clone/build/built.cache"
	echo "Removing build logs..."
	find $omnios_clone -type f -name build.log\* -exec rm {} +
	echo "Cleaning illumos-omnios..."
	/opt/onbld/bin/bldenv $illumos_env 'cd usr/src && dmake clobber'
}

merge_gate()
{
	ask "Merge changes from upstream illumos-gate?" || exit 0
	check_repo "$illumos_clone" $branch
	(
		_branch=upstream_merge/`date +%Y%m%d`01
		cd $illumos_clone
		git checkout -b $_branch || exit 1
		check_repo "$illumos_clone" $_branch
		git merge upstream_gate
	) || exit 1
}

lx_begin()
{
	check_repo "$lxdata_clone" $branch
	(
		cd $lxdata_clone
		git pull

		if [ -f ij-ALL-commits ]; then
			abort "An LX merge session is in progress, aborting."
		fi

		check_repo "$illumos_clone" $branch
		cd $illumos_clone
		reset_illumos_branch
		git checkout upstream_joyent || exit 1

		echo "--- Building list of new commits"

		git log --reverse --no-merges --format=%H `joyent_commit`.. \
		    > $lxdata_clone/ij-ALL-commits

		echo "    Found  `wc -l < $lxdata_clone/ij-ALL-commits`"\
		    "commit(s)"

		echo "--- Filtering out gate commits"

		git log master --format=%H > $lxdata_clone/ij-GATE-commits
		fgrep -v -f $lxdata_clone/ij-GATE-commits \
		    $lxdata_clone/ij-ALL-commits \
		    > $lxdata_clone/ij-TODO-commits

		num=`wc -l < $lxdata_clone/ij-TODO-commits`

		if [ $num -eq 0 ]; then
			echo "-- No commits to evaluate."
			rm -f $lxdata_clone/ij-*
			git checkout master
		else
			echo "    Leaves $num commit(s)"
			_branch=joyent_merge/`date +%Y%m%d`01
			git checkout -b $_branch master || exit 1
			check_repo "$illumos_clone" $_branch
		fi
	) || exit 1
}

lx_pick()
{
	_branch=`repo_branch $illumos_clone`
	[[ $_branch = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (have you run lx_begin?)"
	[ -f $lxdata_clone/ij-TODO-commits ] || \
	    abort "No LX merge session in progress"

	(
		cd $illumos_clone

		while :; do
			num=`wc -l < $lxdata_clone/ij-TODO-commits`
			if [ $num -lt 1 ]; then
				cat << EOM

--- No commits remaining. Run 'lx_end' to finish.

EOM
				exit 1
			fi
			banner "$num commit(s) remaining"
			hash=`head -1 $lxdata_clone/ij-TODO-commits`
			git show --stat $hash

			echo

			if ask "Cherry pick this commit?"; then
				echo $hash >> $lxdata_clone/ij-picked-commits
				cherry=1
			else
				echo $hash >> $lxdata_clone/ij-skipped-commits
				cherry=0
			fi
			echo $hash >> $lxdata_clone/ij-decided-commits
			sed -i "/$hash/d" $lxdata_clone/ij-TODO-commits
			if [ $cherry -eq 1 ]; then
				if ! git cherry-pick $hash; then
					banner "Problem during cherry-pick."
					exit 1
				fi
			fi
		done
	) || exit 1
}

lx_end()
{
	_branch=`repo_branch $illumos_clone`
	[[ $_branch = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (have you run lx_begin?)"
	[ -f $lxdata_clone/ij-TODO-commits ] || \
	    abort "No LX merge session in progress"
	[ -s $lxdata_clone/ij-TODO-commits ] && \
	    abort "Not all commits have been evaluated,"\
	    "run 'lx_pick' until none remain."

	lasthash=`tail -1 $lxdata_clone/ij-decided-commits`

	(
		banner "Archiving port data"

		cd $lxdata_clone
		arc=`date +%Y/%b%d`
		[ -d $arc ] && abort "Archive directory $arc alread exists."
		mkdir -p $arc
		rm -f ij-TODO-commits	# Now empty
		rm -f ij-GATE-commits
		mv ij-* $arc

		git add $arc
		git commit -m "LX Port data for $_branch" $arc

		is guardian \
		    && ask "Push lx-port-data back to github/omniosorg?" \
		    && git push

		cd $illumos_clone

		banner "Updating README.OmniOS ($lasthash)"

		sed -i "/^Last illumos-joyent/s/: .*/: $lasthash/" \
		    README.OmniOS
		git commit -m 'Update README.OmniOS with last Joyent commit' \
		    README.OmniOS

		banner "The following commits have been picked."
		git log --reverse master..$_branch
		echo
	)

}

push_upstreams()
{
	check_repo "$illumos_clone" $branch
	ask "Push upstream branches to github/omniosorg?" || exit 0
	(
		cd $illumos_clone

		for _branch in upstream_gate upstream_joyent; do
			banner "Pushing $_branch branch to github/omniosorg"
			git push upstream $_branch
		done
	)
}

help()
{
	cat << EOM
omni [-n|-y] <operation>

    -n               - assume no to all questions.
    -y               - assume yes to all questions.

Operations:

    update_illumos   - update your local omnios illumos environment     (ui)
    build_illumos    - build omnios-illumos                             (bi)

    update_omnios    - update your local omnios build environment       (uo)
    build_omnios     - build OmniOS                                     (bo)

    onu              - Create a new boot environment from the local
                       built omnios-illumos

    cleanup          - reset build environment to clean state
EOM

	is dev && cat << EOM

    upstream_diff    - show changes between omnios-illumos master and   (ud)
                       upstream (bloody only)
    merge_gate       - merge changes from upstream illumos-gate to new  (mg)
                       branch.
    lx_begin         - begin the upstream lx zone merge process.        (lb)
    lx_pick          - evaluate the next lx commit.                     (lp)
    lx_end           - finish the lx zone merge process.                (le)

EOM

	is guardian && cat << EOM

    push_upstreams   - Push upstream branches to github/omniosorg       (pu)

EOM

	cat << EOM
NB: Ops can be abbreviated to the term shown in brackets, e.g. 'omni uo'
	
EOM
}

[ "$1" = "-y" ] && answer=y && shift
[ "$1" = "-n" ] && answer=n && shift

[ -z "$@" ] && help

for op in "$@"; do
    case $op in
	ui|update_illumos)		update_illumos ;;
	bi|build_illumos)		build_illumos ;;
	uo|update_omnios)		update_omnios ;;
	bo|build_omnios)		build_omnios ;;
	onu)				onu_illumos ;;
	cleanup)			cleanup ;;
	ud|upstream_diff)		is dev && upstream_diff || help ;;
	mg|merge_gate)			is dev && merge_gate || help ;;
	lb|lx_begin)			is dev && lx_begin || help ;;
	lp|lx_pick)			is dev && lx_pick || help ;;
	le|lx_end)			is dev && lx_end || help ;;
	pu|push_upstreams)		is guardian && push_upstreams || help ;;
	*) 				"$@" || help ;;
    esac
done

exit 0

