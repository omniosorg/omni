#!/bin/ksh -e

# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# Copyright 2017 OmniOS Community Edition (OmniOSce) Association.

export PATH=/usr/bin:/usr/sbin

if [ "$1" = "setup" ]; then
	shift
	script=`readlink -f "$0"`
	"`dirname "$script"`/../setup" "$@"
	exit 0
fi

CFGFILE=$HOME/.omni
if [ "$1" = "-c" -a -n "$2" ]; then
	CFGFILE="$2"
	shift 2
fi

if [ ! -f "$CFGFILE" ]; then
	cat <<- EOM

omni has not yet been configured, please run:

    $0 setup [-ssh] <build directory> <github username>

Where <build directory> points to an empty directory that will be used
for building OmniOS.

	EOM
	exit 0
fi

# shellcheck disable=SC1090
. "$CFGFILE"

: "${PFEXEC:=sudo}"
: "${illumos_clone:="$wd/illumos-omnios"}"
: "${omnios_clone:="$wd/omnios-build"}"
: "${lxdata_clone:="$wd/lx-port-data"}"
: "${kayak_clone:="$wd/kayak"}"
: "${kayak_image:="rpool/kayak_image"}"
: "${omnios_buildtmp:="$wd/tmp"}"
: "${omnios_buildrepo:="$wd/repo"}"
: "${illumos_env:="$wd/omnios.env"}"
if [ "$branch" != r151022 ]; then
	: "${omnios_buildarg:="parallel 3"}"
else
	: "${omnios_buildarg:="continue"}"
fi
: "${role:=1}"
: "${answer:=}"
: "${release:=unknown}"
: "${gituser:=unknown}"

export ij="$lxdata_clone/ij"

show_config()
{
	cat << EOM

Current configuration ($CFGFILE):

    Release:              $release
    Branch:               $branch
    Privilege Escalation: $PFEXEC

    illumos Clone:        $illumos_clone
    illumos Env File:     $illumos_env

    OmniOS Clone:         $omnios_clone
    OmniOS Build Area:    $omnios_buildtmp
    OmniOS Build Args:    $omnios_buildarg
    IPS Build Repo:       $omnios_buildrepo

    Kayak Clone:          $kayak_clone

EOM
}

banner()
{
	echo
	echo "*** $*"
	echo
}

abort()
{
	banner "$@"
	exit 1
}

is()
{
	case "$@" in
	    dev)	[ "$role" -gt 1 ] && return 0 ;;
	    guardian)	[ "$role" -gt 2 ] && return 0 ;;
	esac
	return 1
}

ask()
{
	typeset a=$answer

	echo "$* (y/n) \\c"
	[ -n "$a" ] && echo $a
	while [[ "$a" != [yYnN] ]]; do
		read -r a
	done
	[[ "$a" = [yY] ]]
}

anything_to_push()
{
	git for-each-ref --format="%(refname:short) %(push:track)" refs/heads \
	    | egrep -s '\[ahead '
}


repo_branch()
{
	typeset repo=${1:?repo}
	git -C "$repo" symbolic-ref --short HEAD
}

reset_illumos_branch()
{
	git checkout closed/README.ON-BINARIES.i386
}

joyent_commit()
{
	git -C "$illumos_clone" show master:README.OmniOS | \
	    grep 'Last illumos-joyent' | \
	    awk '{print $4}'
}

check_repo()
{
	typeset repo="${1:?}"
	typeset branch="${2:?}"

	if [ -z "$repo" ]; then
		echo "Repository path is not set in $CFGFILE"
		exit 1
	fi

	banner "Checking repository $repo ($branch)"

	typeset actual_branch="`repo_branch "$repo"`"

	if [ "$actual_branch" != "$branch" ]; then
		echo "$repo is not on $branch branch ($actual_branch)"
		exit 1
	fi
}

update_illumos_bloody()
{
	(
		cd "$illumos_clone"
		reset_illumos_branch
		git pull upstream "$branch" --no-edit --tags

		for _branch in upstream_gate upstream_joyent; do
			banner "Updating $_branch branch"
			git checkout "$_branch"
			git pull "$_branch" master
		done

		git checkout "$branch"

		echo
		# Check to see if there are any updates to push back
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			for _branch in "$branch" upstream_gate upstream_joyent
			do
				banner "Pushing $_branch branch"
				git push origin "$_branch"
			done
			git push origin --tags
		fi
	)
}

update_illumos_stable()
{
	(
		cd "$illumos_clone"
		reset_illumos_branch
		git pull upstream "$branch" --no-edit --tags
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin "$branch"
			git push origin --tags
		fi
	)
}

update_illumos()
{
	check_repo "$illumos_clone" "$branch"
	banner "Updating illumos-omnios $release branch"
	if [ "$release" = bloody ]; then
		update_illumos_bloody
	else
		update_illumos_stable
	fi
}

diff_colour()
{
	gegrep --colour '^|^ [^ ].*'
}

upstream_diff()
{
	typeset arg="$1"

	[ "$release" != bloody ] \
	    && abort "Command not available for $release release"

	check_repo "$illumos_clone" "$branch"
	(
		cd "$illumos_clone"

		echo "GATE:"
		echo
		git log --reverse --no-merges --abbrev-commit \
		    master..upstream_gate \
		    | nawk '
			function op() {
				if (commit)
					printf("%-69s %s\n", issue, commit)
				commit = 0
			}
			/^commit /	{ op(); commit = $2 }
			/^    [0-9][0-9][0-9][0-9] / {
				gsub(/  +/, " ")
				issue = substr($0, 0, 69)
			}
			END { op() }
		    ' | diff_colour

		hash="`joyent_commit`"
		echo
		echo "JOYENT ($hash..):"
		echo

		reset_illumos_branch
		git checkout -q upstream_joyent
		git whatchanged --reverse --no-merges --abbrev-commit \
		    "$hash.." | nawk -v "opt=$arg" '
			function op() {
				if (matched)
				{
					printf("%-69s %s\n", issue, commit)
					for (i in files)
						print "         ", files[i]
					print ""
					matched = 0
				}
				# Clear array
				split("", files)
			}
			/^commit /	{ op(); commit = $2 }
			/OS-[0-9]/ {
				gsub(/  +/, " ")
				issue = substr($0, 0, 69)
			}
			/^:/ {
				files[NR] = sprintf("%s %s", $5, $6)
			}
			opt == "all"	 { matched = 1 }
			/ lx /		 { matched = 1 }
			/(brand|fs)\/lx/ { matched = 1 }
			/\/lx_/		 { matched = 1 }
			END { op() }
		    ' | diff_colour
		git checkout -q "$branch"
		echo
	)
}

update_omnios()
{
        check_repo "$omnios_clone" "$branch"
	banner "Updating $release OmniOS build"
        (
		cd "$omnios_clone"
		git pull upstream "$branch" --no-edit --tags
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin "$branch"
			git push origin --tags
		fi
	)
}

update_kayak()
{
	check_repo "$kayak_clone" "$branch"
	banner "Updating $release kayak"
	(
		cd "$kayak_clone"
		git pull upstream "$branch" --no-edit
		echo
		if anything_to_push && ask "Push updates to github/$gituser?"
		then
			git push origin "$branch"
		fi
	)
}

terminate_illumos()
{
	banner "Stopping illumos build, please wait..."
	kill "$nightlypid" 2>/dev/null
	pkill -P "$tailpid"
	sleep 1
	kill -9 "$tailpid" 2>/dev/null
}

build_illumos()
{
	typeset env="${1:-${illumos_env}}"

	lockf="$illumos_clone/log/nightly.lock"
	if [ -h "$lockf" ]; then
		# shellcheck disable=SC2012 disable=SC2034 disable=SC2162
		ls -l "$lockf" | nawk '{print $NF}' | IFS=. read host user pid
		kill -0 "$pid" 2>/dev/null \
		    && abort "Illumos build already in progress."
		banner "Stale build lockfile detected, ignoring."
	fi

	typeset benv="`basename "$env"`"
	banner "Starting illumos-omnios $release build... ($benv)"

	# Remove any stale log file
	export logf="$illumos_clone/log/nightly.log"
	[ -f "$logf" ] && rm -f "$logf"

	ctrun -l child -o noorphan /opt/onbld/bin/nightly "$env" &
	nightlypid=$!

	(
		while [ ! -f "$logf" ]; do
			sleep 1
		done
		tail -f "$logf" | egrep '^(====|real |user |sys )'
	) &
	tailpid=$!

	trap terminate_illumos INT
	wait $nightlypid
	trap - INT
	terminate_illumos
	sleep 10
}

build_omnios()
{
	typeset arg="${*:-${omnios_buildarg}}"
	(
		cd "$omnios_clone/build"
		[ -z "$USER" -a -n "$LOGNAME" ] && USER="$LOGNAME"
		# shellcheck disable=SC2086
		ctrun -l child -o noorphan ./buildctl build $arg
	)
}

build_world()
{
	build_illumos &
	build_omnios "$@"
}

build_media()
{
	[ "`zonename`" = "global" ] || \
	    abort "Install media can only be built in the GZ."

	zfs list $kayak_image >/dev/null 2>&1 && \
	    $PFEXEC zfs destroy -R $kayak_image

	(
		cd "$kayak_clone"
		export PKGURL="file://$omnios_buildrepo"
		export PREBUILT_ILLUMOS="$illumos_clone"
		$PFEXEC gmake install-usb clean
	)
}

onu_destroy()
{
	ask "Destroy all unused ONU boot environments?" || exit 0
	beadm list -H | awk -F\; '
	    $1 ~ /-onu$/ && $3 !~ /N/ { print $1}
	' | while read -r be; do
		echo "Destroying $be"
		$PFEXEC beadm destroy -F "$be"
	done
}

onu_illumos()
{
	pkgdir="$illumos_clone/packages/i386/nightly-nd"
	[ -d "$pkgdir" ] || abort "No built illumos packages found."

	be="`date +%Y%m%d01`"
	while beadm list -H | egrep -s "^${be}-onu;"; do
		((be = be + 1))
	done
	banner "ONU to new BE $be-onu"
	$PFEXEC /opt/onbld/bin/onu -t "$be-onu" -d "$pkgdir"
}

view_mail_msg()
{
	[ ! -d "$illumos_clone/log" ] && abort "No log directory present."
	(
		cd "$illumos_clone/log"
		# shellcheck disable=SC2012
		dir="`ls -1tr | fgrep 'log.' | tail -1`"
		[ -f "$dir/mail_msg" ] || abort "Mail message not present."
		less -X "$dir/mail_msg"
	)
}

reset_buildrepo()
{
	echo "Clearing build IPS repository..."
	[ -d "$omnios_buildrepo" ] && rm -rf "$omnios_buildrepo"
	pkgrepo create "$omnios_buildrepo"
	pkgrepo add-publisher -s "$omnios_buildrepo" omnios
	pkgrepo -s "$omnios_buildrepo" info
}

cleanup()
{
	echo "Clearing temporary build directory..."
	[ -d "$omnios_buildtmp" ] && rm -rf "$omnios_buildtmp"
	reset_buildrepo
	echo "Removing build logs..."
	find "$omnios_clone" -type f -name build.log\* -exec rm {} +
	echo "Cleaning illumos-omnios..."
	/opt/onbld/bin/bldenv "$illumos_env" \
	    "cd $illumos_clone/usr/src && dmake clobber" > /dev/null
	echo "Removing illumos proto area..."
	[ -d "$illumos_clone/proto" ] && rm -rf "$illumos_clone/proto"
	echo "Removing illumos packages area..."
	[ -d "$illumos_clone/packages" ] && rm -rf "$illumos_clone/packages"
}

merge_gate()
{
	ask "Merge changes from upstream illumos-gate?" || exit 0
	check_repo "$illumos_clone" "$branch"
	(
		_branch="upstream_merge/`date +%Y%m%d`01"
		cd "$illumos_clone"
		git checkout -b "$_branch" || exit 1
		check_repo "$illumos_clone" "$_branch"
		git merge upstream_gate
	) || exit 1
}

lx_begin()
{
	check_repo "$lxdata_clone" "$branch"
	(
		cd "$lxdata_clone"
		git pull

		[ -f ij-ALL-commits ] && \
		    abort "An LX merge session is in progress, aborting."


		check_repo "$illumos_clone" "$branch"
		cd "$illumos_clone"
		reset_illumos_branch
		# Ensure that the local branch is fully up-to-date
		git pull upstream "$branch" --no-edit --tags || exit 1
		git checkout upstream_joyent || exit 1

		echo "--- Building list of new commits"

		git log --reverse --no-merges --format=%H "`joyent_commit`.." \
		    > "${ij}-ALL-commits"

		echo "    Found  `wc -l < "$lxdata_clone/ij-ALL-commits"`"\
		    "commit(s)"

		echo "--- Filtering out gate commits"

		git log master --format=%H > "${ij}-GATE-commits"
		fgrep -v -f "${ij}-GATE-commits" "${ij}-ALL-commits" \
		    > "${ij}-TODO-commits"

		num="`wc -l < "${ij}-TODO-commits"`"

		if [ "$num" -eq 0 ]; then
			echo "-- No commits to evaluate."
			rm -f "$ij"-*
			git checkout "$branch"
		else
			echo "    Leaves $num commit(s)"
			_branch="joyent_merge/`date +%Y%m%d`01"
			git checkout -b "$_branch" master || exit 1
			check_repo "$illumos_clone" "$_branch"
		fi
	) || exit 1
}

lx_pick()
{
	_branch="`repo_branch "$illumos_clone"`"
	[[ "$_branch" = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (have you run lx_begin?)"

	[ -f "${ij}-TODO-commits" ] || abort "No LX merge session in progress"

	(
		cd "$illumos_clone"

		while :; do
			num="`wc -l < "${ij}-TODO-commits"`"
			if [ "$num" -lt 1 ]; then
				cat << EOM

--- No commits remaining. Run 'lx_end' to finish.

EOM
				exit 1
			fi
			banner "$num commit(s) remaining"
			hash="`head -1 "${ij}-TODO-commits"`"
			git show --stat "$hash"

			echo

			if ask "Cherry pick this commit?"; then
				echo "$hash" >> "${ij}-picked-commits"
				cherry=1
			else
				echo "$hash" >> "${ij}-skipped-commits"
				cherry=0
			fi
			echo "$hash" >> "${ij}-decided-commits"
			sed -i "/$hash/d" "${ij}-TODO-commits"
			if [ "$cherry" -eq 1 ]; then
				if ! git cherry-pick "$hash"; then
					banner "Problem during cherry-pick."
					exit 1
				fi
			fi
		done
	) || exit 1
}

lx_end()
{
	_branch="`repo_branch "$illumos_clone"`"
	[[ $_branch = joyent_merge/* ]] || \
	    abort "On wrong branch, $_branch (have you run lx_begin?)"
	[ -f "${ij}-TODO-commits" ] || abort "No LX merge session in progress"
	[ -s "${ij}-TODO-commits" ] && \
	    abort "Not all commits have been evaluated,"\
	    "run 'lx_pick' until none remain."

	lasthash="`tail -1 "$lxdata_clone/ij-decided-commits"`"

	(
		banner "Archiving port data"

		cd "$lxdata_clone"
		arc="`date +%Y/%b%d`"
		[ -d "$arc" ] && abort "Archive directory $arc alread exists."
		mkdir -p "$arc"
		rm -f ij-TODO-commits	# Now empty
		rm -f ij-GATE-commits
		mv ij-* "$arc"

		git add "$arc"
		git commit -m "LX Port data for $_branch" "$arc"

		is guardian \
		    && ask "Push lx-port-data back to github/omniosorg?" \
		    && git push

		cd "$illumos_clone"

		banner "Updating README.OmniOS ($lasthash)"

		sed -i "/^Last illumos-joyent/s/: .*/: $lasthash/" \
		    README.OmniOS
		git commit -m 'Update README.OmniOS with last Joyent commit' \
		    README.OmniOS

		banner "The following commits have been picked."
		git log --reverse "master..$_branch"
		echo
	)

}

push_upstreams()
{
	check_repo "$illumos_clone" "$branch"
	ask "Push upstream branches to github/omniosorg?" || exit 0
	(
		cd "$illumos_clone"

		for _branch in upstream_gate upstream_joyent; do
			banner "Pushing $_branch branch to github/omniosorg"
			git push upstream "$_branch"
		done
	)
}

help()
{
	cat << EOM
omni [-n|-y] <operation>

    -c <file>           - Use alternative configuration file.
    -y/-n               - assume yes/no to all questions.

Operations (defaults for optional arguments are shown in []):

    show_config         - display the current configuration                (cfg)

    update_illumos      - update your local omnios illumos environment     (ui)
    build_illumos [env] - build omnios-illumos [omnios.env]                (bi)
    mail_msg            - view mail_msg file from last build               (mm)

    update_omnios       - update your local omnios build environment       (uo)
    build_omnios [args] - build OmniOS `printf "%-36s" "[$omnios_buildarg]"`(bo)

    update_world        - update local illumos and omnios                  (uw)
    build_world [args]  - build illumos-omnios and OmniOS in parallel.     (bw)
			  The default env file is used for illumos, any
                          provided arguments are passed to 'build_omnios'

    update_kayak        - update your local kayak clone                    (uk)
    build_media         - build OmniOS install media (GZ only)             (bm)

    onu                 - Create a new boot environment from the locally
                          built copy of omnios-illumos
    destroy_onu         - Remove all ONU boot environments                 (do)

    cleanup             - reset build environment to clean state
    reset_repo          - clear and re-initialise the build repo           (rr)
EOM

	is dev && cat << EOM

    upstream_diff       - show changes between omnios-illumos master and   (ud)
                          upstream (bloody only)
    merge_gate          - merge changes from upstream illumos-gate to new  (mg)
                          branch.
    lx_begin            - begin the upstream lx zone merge process.        (lb)
    lx_pick             - evaluate the next lx commit.                     (lp)
    lx_end              - finish the lx zone merge process.                (le)

EOM

	is guardian && cat << EOM

    push_upstreams      - Push upstream branches to github/omniosorg       (pu)

EOM

	cat << EOM
NB: Ops can be abbreviated to the term shown in brackets, e.g. 'omni uo'
	
EOM
}

[ "$1" = "-y" ] && answer=y && shift
[ "$1" = "-n" ] && answer=n && shift

[ -z "$*" ] && help && exit 0

op="$1"; shift
case $op in
	cfg|sc|show_config)		show_config ;;
	ui|update_illumos)		update_illumos ;;
	bi|build_illumos)		build_illumos "$@" ;;
	uo|update_omnios)		update_omnios ;;
	bo|build_omnios)		build_omnios "$@" ;;
	uw|update_world)		update_illumos && update_omnios ;;
	bw|build_world)			build_world "$@" ;;
	uk|update_kayak)		update_kayak ;;
	bm|build_media)			build_media ;;
	mail_msg|mm)			view_mail_msg ;;
	onu)				onu_illumos ;;
	"do"|destroy_onu)		onu_destroy ;;
	cleanup)			cleanup ;;
	rr|reset_repo|repo_reset)	reset_buildrepo ;;
	ud|upstream_diff)		is dev && upstream_diff "$@" || help ;;
	mg|merge_gate)			is dev && merge_gate || help ;;
	lb|lx_begin)			is dev && lx_begin || help ;;
	lp|lx_pick)			is dev && lx_pick || help ;;
	le|lx_end)			is dev && lx_end || help ;;
	pu|push_upstreams)		is guardian && push_upstreams || help ;;
	*)				help ;;
esac

exit 0

